When would you want to use a remote repository rather than keeping all your work local?

	When you are working on a project with a team or would like to have access to your personal project across
	several of your own machines. Also, you would use a remote repository when you would like to share your project
	with the public.


Why might you want to always pull changes manually rather than having Git automatically stay
up-to-date with your remote respository?

	It is a better idea to pull changes from your remote repository manually instead of automatically
	because you might not want to have everything on your local machine to be made public if it is not 
	ready to be deployed.


Describe the differences between forks, clones, and branches. When would you use one instead of another?
	
	Branches is an action taken on a the same repository, all of the files are copied under a different
	commit label. Cloning and forking a repository is very similar, the difference being that forking is
	a tool on Github and it is used specifically for cloning an exising GitHub project into your own 
	profile. You would want to use fork when you would like to access someone else's project on GitHub
	who you do not have commit access to. You would use cloning in all other cases.


What is the benefit of having a copy of the last known state of the remote stored locally?

	If you have a copy of the last known state of the remote stored locally, you can work offline and have
	those changes accessible to you. You can also run a diff to see what has changed so far compared to your
	current working state.


How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

	Short answer: use a different svn tool. Long answer: Plan all of the components of the code out and 
	assign a component to each collaborator. Then share and merge code via zip files. It would be hardest
	to merge the code.


When would you want to make changes in a separate branch rather than directly in master? What benefits 
does each approach have?

	You would want to make changes in a separate branch rather than directly in master when you are adding
	new features or doing anything exeperimental that might break code on the master branch. The benefits of 
	working directly on master branch is that all changes are made are immediately effective and there is no 
	need to deal with merge requests. The benefits of making changes in a different branch is that you are 
	free to experiment with the code and make any changes you like without the fear of breaking the code on 
	the master branch.